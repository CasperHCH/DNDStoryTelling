services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql+asyncpg://user:${DB_PASSWORD}@db:5432/dndstory
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CONFLUENCE_API_TOKEN=${CONFLUENCE_API_TOKEN}
      - CONFLUENCE_URL=${CONFLUENCE_URL}
      - CONFLUENCE_PARENT_PAGE_ID=${CONFLUENCE_PARENT_PAGE_ID}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:8000}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=dndstory
      - LANG=en_US.utf8
      - LC_ALL=en_US.utf8
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d dndstory"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    restart: unless-stopped

  # Optional: Add nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - app_uploads:/var/www/uploads:ro
    depends_on:
      - web
    restart: unless-stopped

volumes:
  postgres_data:
  app_uploads:
  app_logs: