#!/bin/bash

# D&D Story Telling - Synology NAS Deployment Script
# This script automates the deployment process on Synology DS718+

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
APP_NAME="dndstorytelling"
BASE_DIR="/volume1/docker/${APP_NAME}"
COMPOSE_FILE="docker-compose.synology.yml"

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_prerequisites() {
    log_info "Checking prerequisites..."

    # Check if running on Synology
    if [ ! -f /etc/synoinfo.conf ]; then
        log_warning "This script is designed for Synology NAS. Continuing anyway..."
    fi

    # Check Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed. Please install Docker from Package Center."
        exit 1
    fi

    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose is not available."
        exit 1
    fi

    # Check available memory
    available_mem=$(free -m | awk 'NR==2{printf "%.0f", $7}')
    if [ "$available_mem" -lt 1024 ]; then
        log_warning "Available memory is ${available_mem}MB. Recommended minimum is 1GB."
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi

    log_success "Prerequisites check completed"
}

setup_directories() {
    log_info "Setting up directories..."

    # Create base directory structure
    mkdir -p "${BASE_DIR}"/{postgres,uploads,config,logs}

    # Set permissions
    chown -R 1000:1000 "${BASE_DIR}"
    chmod 755 "${BASE_DIR}"

    log_success "Directories created at ${BASE_DIR}"
}

setup_environment() {
    log_info "Setting up environment configuration..."

    ENV_FILE="${BASE_DIR}/.env"

    if [ -f "$ENV_FILE" ]; then
        log_warning "Environment file already exists at $ENV_FILE"
        read -p "Overwrite existing configuration? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Using existing environment file"
            return
        fi
    fi

    # Create environment file with prompts
    cat > "$ENV_FILE" << 'EOF'
# D&D Story Telling Configuration for Synology NAS
# Generated by deployment script

# Required API Keys (MUST be configured)
OPENAI_API_KEY=your_openai_api_key_here
CONFLUENCE_API_TOKEN=your_confluence_token_here
CONFLUENCE_URL=https://your-domain.atlassian.net

# Security (CHANGE THESE)
SECRET_KEY=synology_secret_key_change_me_to_something_secure_32chars_min
POSTGRES_PASSWORD=change_this_secure_database_password

# Optional Settings
CONFLUENCE_PARENT_PAGE_ID=123456789
EOF

    # Secure the file
    chmod 600 "$ENV_FILE"

    log_warning "Environment file created at $ENV_FILE"
    log_warning "IMPORTANT: Edit this file and configure your API keys before starting the application!"
    log_info "Required changes:"
    echo "  1. Set OPENAI_API_KEY to your OpenAI API key"
    echo "  2. Set CONFLUENCE_API_TOKEN to your Confluence API token"
    echo "  3. Set CONFLUENCE_URL to your Confluence instance URL"
    echo "  4. Change SECRET_KEY to a secure random string"
    echo "  5. Change POSTGRES_PASSWORD to a secure database password"
}

copy_files() {
    log_info "Copying application files..."

    # Copy docker-compose file
    if [ -f "$COMPOSE_FILE" ]; then
        cp "$COMPOSE_FILE" "${BASE_DIR}/"
        log_success "Docker Compose file copied"
    else
        log_error "Docker Compose file $COMPOSE_FILE not found"
        exit 1
    fi

    # Copy PostgreSQL configuration
    if [ -f "postgres/synology-postgresql.conf" ]; then
        mkdir -p "${BASE_DIR}/postgres"
        cp postgres/synology-postgresql.conf "${BASE_DIR}/postgres/"
        log_success "PostgreSQL configuration copied"
    else
        log_warning "PostgreSQL configuration not found, using defaults"
    fi

    # Copy other necessary files
    for file in Dockerfile requirements.txt wait-for-it.sh; do
        if [ -f "$file" ]; then
            cp "$file" "${BASE_DIR}/"
        fi
    done

    # Copy application code
    if [ -d "app" ]; then
        cp -r app "${BASE_DIR}/"
        log_success "Application code copied"
    else
        log_warning "Application code directory not found"
    fi
}

deploy_application() {
    log_info "Deploying application..."

    cd "$BASE_DIR"

    # Check if environment is configured
    if grep -q "your_openai_api_key_here" .env; then
        log_error "Environment file is not configured!"
        log_error "Please edit ${BASE_DIR}/.env with your actual API keys and settings"
        return 1
    fi

    # Pull/build and start services
    log_info "Building and starting services..."
    docker-compose -f "$COMPOSE_FILE" up -d --build

    # Wait for services to be ready
    log_info "Waiting for services to start..."
    sleep 30

    # Check service health
    check_service_health
}

check_service_health() {
    log_info "Checking service health..."

    cd "$BASE_DIR"

    # Check database
    if docker-compose -f "$COMPOSE_FILE" exec -T db pg_isready -U user -d dndstory; then
        log_success "Database is ready"
    else
        log_error "Database is not responding"
        return 1
    fi

    # Check web service
    sleep 10
    if curl -f http://localhost:8000/health 2>/dev/null || curl -f http://localhost:8000/ 2>/dev/null; then
        log_success "Web service is responding"
    else
        log_error "Web service is not responding"
        log_info "Checking logs..."
        docker-compose -f "$COMPOSE_FILE" logs web
        return 1
    fi

    log_success "All services are healthy!"
}

show_status() {
    log_info "Deployment Status:"
    echo

    cd "$BASE_DIR"

    # Show running containers
    echo "Running containers:"
    docker-compose -f "$COMPOSE_FILE" ps
    echo

    # Show resource usage
    echo "Resource usage:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
    echo

    # Show access information
    echo "Access Information:"
    echo "  Application URL: http://$(hostname -I | awk '{print $1}'):8000"
    echo "  Health Check: http://$(hostname -I | awk '{print $1}'):8000/health"
    echo "  Configuration: ${BASE_DIR}/.env"
    echo "  Logs: docker-compose -f ${BASE_DIR}/${COMPOSE_FILE} logs"
    echo
}

main() {
    echo "==============================================="
    echo "D&D Story Telling - Synology NAS Deployment"
    echo "==============================================="
    echo

    check_prerequisites
    setup_directories
    setup_environment
    copy_files

    log_info "Files copied and environment prepared."
    log_warning "Please edit ${BASE_DIR}/.env with your actual API keys and settings"

    read -p "Deploy the application now? (Y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Nn]$ ]]; then
        deploy_application
        show_status

        log_success "Deployment completed successfully!"
        log_info "Your D&D Story Telling application is now running on your Synology NAS"
    else
        log_info "Deployment skipped. Run this script again when ready to deploy."
        log_info "Or manually run: cd ${BASE_DIR} && docker-compose -f ${COMPOSE_FILE} up -d"
    fi
}

# Handle script arguments
case "${1:-}" in
    --check-health)
        check_service_health
        ;;
    --status)
        show_status
        ;;
    --logs)
        cd "$BASE_DIR"
        docker-compose -f "$COMPOSE_FILE" logs -f
        ;;
    --stop)
        cd "$BASE_DIR"
        docker-compose -f "$COMPOSE_FILE" down
        log_success "Application stopped"
        ;;
    --restart)
        cd "$BASE_DIR"
        docker-compose -f "$COMPOSE_FILE" restart
        log_success "Application restarted"
        ;;
    *)
        main
        ;;
esac