[pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = -v -s --cov=app --cov-report=html

# filepath: c:\repos\DNDStoryTelling\tests\conftest.py
import pytest
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.models.database import Base
from app.models.user import User
from app.auth.auth_handler import get_password_hash
import os

TEST_DATABASE_URL = "postgresql://user:password@localhost:5432/dndstory_test"

@pytest.fixture(scope="session")
def engine():
    engine = create_engine(TEST_DATABASE_URL)
    Base.metadata.create_all(engine)
    yield engine
    Base.metadata.drop_all(engine)

@pytest.fixture
def db_session(engine):
    Session = sessionmaker(bind=engine)
    session = Session()
    yield session
    session.rollback()
    session.close()

@pytest.fixture
def test_user(db_session):
    user = User(
        username="testuser",
        hashed_password=get_password_hash("testpass"),
        openai_api_key="test_openai_key",
        confluence_api_token="test_confluence_token",
        confluence_url="https://test.atlassian.net"
    )
    db_session.add(user)
    db_session.commit()
    return user

# filepath: c:\repos\DNDStoryTelling\tests\test_confluence.py
import pytest
from fastapi.testclient import TestClient
from app import app
from unittest.mock import patch, MagicMock

client = TestClient(app)

@pytest.fixture
def auth_headers():
    response = client.post(
        "/auth/token",
        data={"username": "testuser", "password": "testpass"}
    )
    token = response.json()["access_token"]
    return {"Authorization": f"Bearer {token}"}

def test_publish_to_confluence(auth_headers):
    mock_response = {
        "id": "12345",
        "_links": {
            "base": "https://your-domain.atlassian.net",
            "webui": "/pages/12345"
        }
    }

    with patch('atlassian.Confluence.create_page') as mock_create:
        mock_create.return_value = mock_response
        response = client.post(
            "/confluence/publish",
            json={
                "content": "Test story content",
                "title": "Test Story",
                "parent_id": "parent123"
            },
            headers=auth_headers
        )

        assert response.status_code == 200
        assert "page_id" in response.json()
        assert "url" in response.json()