services:
  web:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
      args:
        - PIP_DEFAULT_TIMEOUT=300
        - PIP_RETRIES=5
    ports:
      - "8001:8000" # Changed host port to 8001 to avoid conflict
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@db:5432/dndstory
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CONFLUENCE_API_TOKEN=${CONFLUENCE_API_TOKEN}
      - CONFLUENCE_URL=${CONFLUENCE_URL}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - ENVIRONMENT=development
      - DEBUG=true
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ../../:/app:cached
      - ../../alembic.ini:/app/alembic.ini:ro
      - ../../alembic:/app/alembic:ro
      - app_uploads:/app/uploads
      - app_logs:/app/logs
      - app_cache:/app/.pytest_cache
    working_dir: /app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=dndstory
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
      - LANG=en_US.utf8
      - LC_ALL=en_US.utf8
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d dndstory"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network

  # Redis for caching (optional but recommended for production)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - caching

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  app_uploads:
  app_logs:
  app_cache: