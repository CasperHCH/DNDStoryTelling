# Free Services Dockerfile - Optimized for cost-effective deployment
# Focuses on lightweight dependencies and efficient resource usage

FROM python:3.11-slim-bookworm

WORKDIR /app

# Install minimal system dependencies for free tier
RUN apt-get update && apt-get install -y \
    gcc \
    ffmpeg \
    sqlite3 \
    curl \
    netcat-openbsd \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* /var/tmp/*

# Configure pip for efficiency
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DEFAULT_TIMEOUT=300
ENV PIP_RETRIES=5

# Copy requirements first for better layer caching
COPY requirements.txt .

# Install Python packages with optimizations for free tier
RUN pip install --no-cache-dir -r requirements.txt \
    && pip install --no-cache-dir \
    aiosqlite \
    python-multipart \
    ffmpeg-python \
    && rm -rf /root/.cache/pip

# Copy application code
COPY . .

# Create necessary directories with proper permissions
RUN mkdir -p /data /app/uploads /app/logs /app/temp /app/static /app/templates \
    && chmod -R 755 /app \
    && chmod -R 777 /data /app/uploads /app/logs /app/temp

# Set environment variables for free services
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONHASHSEED=random
ENV TZ=UTC

# Free tier optimizations
ENV USE_SQLITE=true
ENV ENABLE_PREMIUM_FEATURES=false
ENV COST_OPTIMIZATION=true
ENV RESOURCE_MONITORING=true

# Expose port
EXPOSE 8000

# Health check optimized for free tier
HEALTHCHECK --interval=120s --timeout=30s --start-period=90s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Start application with resource-efficient settings
CMD ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1", "--access-log"]